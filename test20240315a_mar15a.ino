#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1540e2ef-38e3-4989-8333-ed8354832ef4

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String regSSID1;
  String regSSID1_pass;
  bool button_03;
  bool test_switch;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <M5Core2.h> // M5Stack Core2ライブラリをインクルード

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  
  M5.begin();
  Serial.begin(9600);
  delay(1000);
  Serial.println("M5Stack Core2 initialized");

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  if(WiFi.status() != WL_CONNECTED)
  {
    SSID = regSSID1.c_str();
    PASS = regSSID1_pass.c_str();




  }

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  M5.update();
  ArduinoCloud.update();
  // Your code here

  // ボタンの状態をチェック
  if (M5.BtnA.wasPressed()) {
    test_switch = true;
    M5.Lcd.fillScreen(TFT_GREEN); // 画面を緑色に設定
    ArduinoCloud.update();
    Serial.println("Switch is ON");
  }

  if (M5.BtnC.wasPressed()) {
    test_switch = false;
    M5.Lcd.fillScreen(TFT_WHITE); // 画面を白色に設定
    ArduinoCloud.update();
    Serial.println("Switch is OFF");
  }

  delay(100);
  

}



/*
  Since Button03 is READ_WRITE variable, onButton03Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onButton03Change()  {
  // Add your code here to act upon Button03 change
  Serial.println("Button03 state changed");
}

/*
  Since TestSwitch is READ_WRITE variable, onTestSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTestSwitchChange()  {
  // Add your code here to act upon TestSwitch change
  Serial.println("TestSwitch state changed");

  // test_switch の値に基づいて行動を変更
  if (test_switch) {
    // 現在 test_switch が false の場合、画面を緑色に変更
    test_switch = true; // test_switch の状態を切り替える
    M5.Lcd.fillScreen(TFT_GREEN); // 画面を緑色に設定
    Serial.println("Screen turned green");
    
  } else {
    // 現在 test_switch が true の場合、画面を白色に変更
    test_switch = false; // test_switch の状態を切り替える
    M5.Lcd.fillScreen(TFT_WHITE); // 画面を白色に設定
    Serial.println("Screen turned white");
    
  }  
  
  
}

/*
  Since Testtest is READ_WRITE variable, onTesttestChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTesttestChange()  {
  // Add your code here to act upon Testtest change
  Serial.println("Testtest state changed");
}

/*
  Since RegSSID1 is READ_WRITE variable, onRegSSID1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onRegSSID1Change()  {
  // Add your code here to act upon RegSSID1 change
  Serial.println("RegSSID1 state changed");
}

/*
  Since RegSSID1Pass is READ_WRITE variable, onRegSSID1PassChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRegSSID1PassChange()  {
  // Add your code here to act upon RegSSID1Pass change
  Serial.println("RegSSID1Pass state changed");
}


//20240319test